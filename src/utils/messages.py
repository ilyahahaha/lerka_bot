from schemas.bgu import BguCompetitionGroup
from schemas.isu import IsuCompetitionGroup


def get_default_message(
    name: str,
    isu_leaderboard: str | None = None,
    istu_leaderboard: str | None = None,
    bgu_leaderboard: str | None = None,
) -> str:
    message = (
        f"üëã <b>–ü—Ä–∏–≤–µ—Ç,</b> {name}."
        + "\n\n"
        + "‚úÖ –Ø —Å–æ–∑–¥–∞–Ω –ø–æ–º–æ—á—å –õ–µ—Ä–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—é –≤ –í–£–ó—ã –ò—Ä–∫—É—Ç—Å–∫–∞."
        + "\n\n"
        + "<b>–¢–µ–∫—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:</b>"
        + "\n\n"
        + "1Ô∏è‚É£ <b>–ò–ì–£: </b>"
        + f"\n{isu_leaderboard if isu_leaderboard else '‚ùå <i>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</i>'}\n\n"
        + "2Ô∏è‚É£ <b>–ò–†–ù–ò–¢–£: </b>"
        + f"\n{istu_leaderboard if istu_leaderboard else '‚ùå <i>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</i>'}\n\n"
        + "3Ô∏è‚É£ <b>–ë–ì–£: </b>"
        + f"\n{bgu_leaderboard if bgu_leaderboard else '‚ùå <i>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</i>'}"
    )

    return message


def build_leaderboard(
    results: list[IsuCompetitionGroup | IsuCompetitionGroup | BguCompetitionGroup],
) -> str:
    message = []

    for result in results:
        text_string = f"<code>üèÜ {result.group} -</code> {result.place} –º–µ—Å—Ç–æ"
        message.append(text_string)

    return "\n".join(message)
