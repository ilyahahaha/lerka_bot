from typing import Any, Dict

from common.keyboard import ValidCallbacks
from schemas.bgu import BguCompetitionGroup
from schemas.isu import IsuCompetitionGroup


def get_default_message(name: str, state_data: Dict[str, Any] | None = None) -> str:
    isu_leaderboard = state_data.get(ValidCallbacks.UPDATE_ISU) if state_data else None
    istu_leaderboard = (
        state_data.get(ValidCallbacks.UPDATE_ISTU) if state_data else None
    )
    bgu_leaderboard = state_data.get(ValidCallbacks.UPDATE_BGU) if state_data else None

    message = (
        f"üëã <b>–ü—Ä–∏–≤–µ—Ç,</b> {name}."
        + "\n\n"
        + "‚úÖ –Ø —Å–æ–∑–¥–∞–Ω –ø–æ–º–æ—á—å –õ–µ—Ä–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—é –≤ –í–£–ó—ã –ò—Ä–∫—É—Ç—Å–∫–∞."
        + "\n\n"
        + "<b>–¢–µ–∫—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:</b>"
        + "\n\n"
        + "1Ô∏è‚É£ <b>–ò–ì–£: </b>"
        + f"\n{isu_leaderboard if isu_leaderboard else '‚ùå <i>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</i>'}\n\n"
        + "2Ô∏è‚É£ <b>–ò–†–ù–ò–¢–£: </b>"
        + f"\n{istu_leaderboard if istu_leaderboard else '‚ùå <i>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</i>'}\n\n"
        + "3Ô∏è‚É£ <b>–ë–ì–£: </b>"
        + f"\n{bgu_leaderboard if bgu_leaderboard else '‚ùå <i>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</i>'}"
    )

    return message


def build_leaderboard(
    result: list[
        IsuCompetitionGroup | IsuCompetitionGroup | BguCompetitionGroup | None
    ],
) -> str | None:
    message = []

    for result in result:
        if result is None:
            continue

        text_string = f"<code>üèÜ {result.group} -</code> {result.place} –º–µ—Å—Ç–æ"
        message.append(text_string)

    return "\n".join(message)
